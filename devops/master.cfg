# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *
import os

# This is triumph4php's buildmaster config file. It defines
#  - a set of buildslaves that live on Amazon EC2
#  - the buildslaves are setup to run on a daily basis
#  - the buildslaves will compile the entire project
#  - the buildslaves will also make distributable packages
#
# This buildbot config file assumes the buildmaster is at least
# version 0.9
#
# This script relies on the following environment variables
#
#   T4P_WINDOWS_BUILDSLAVE_PASSWORD - the password of the buildbot slave (in the slave config)
#   T4P_WINDOWS_AMI - the AMI ID for the windows image
#   T4P_WINDOWS_VOLUME_ID - the volume ID for the extra drive to attach to the windows image
#   T4P_UBUNTU12_BUILDSLAVE_PASSWORD - the password of the buildbot slave (in the slave config)
#   T4P_UBUNTU12_AMI - the AMI ID for the ubuntu 12 image
#   T4P_UBUNTU14_BUILDSLAVE_PASSWORD - the password of the buildbot slave (in the slave config)
#   T4P_UBUNTU14_AMI - the AMI ID for the fedora 121 image
#   T4P_FEDORA_BUILDSLAVE_PASSWORD - the password of the buildbot slave (in the slave config)
#   T4P_FEDORA_AMI - the AMI ID for the fedora 21 image
#   T4P_EC2_IDENTIFIER - the identifier to authentication with Amazon EC2
#   T4P_EC2_SECRET_IDENTIFIER - the secret identifier to authentication with Amazon EC2
#   T4P_STATUS_EMAIL_FROM - the email sender for build notifications
#   T4P_STATUS_EMAIL_TO - the email recipient for build notifications
#   T4P_STATUS_EMAIL_HOST - the email server host for build notifications
#   T4P_STATUS_EMAIL_PORT - the email server port for build notifications
#   T4P_STATUS_EMAIL_PASSWORD - the password for the email server for build notifications
#   T4P_WEB_AUTH_USER - the user that can trigger builds via the web
#   T4P_WEB_AUTH_PASSWORD - the password for user that can trigger builds via the web
#   T4P_GITHUB_SCECRET - 'secret' string that is used for authentication of Github webhooks
#
# This file must be installed as 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.plugins import buildslave

c['slaves'] = [

	# these are for testing, when we bring up a new VM and
	# we want to do a dry-run
	#buildslave.BuildSlave("triumph4php-fedora", os.getenv('T4P_FEDORA_BUILDSLAVE_PASSWORD')),
	#buildslave.BuildSlave("triumph4php-windows", os.getenv('T4P_WINDOWS_BUILDSLAVE_PASSWORD')),
	#buildslave.BuildSlave("triumph4php-ubuntu-latent", os.getenv('T4P_UBUNTU12_BUILDSLAVE_PASSWORD')),
	#buildslave.BuildSlave("triumph4php-ubuntu-14-latent", os.getenv('T4P_UBUNTU14_BUILDSLAVE_PASSWORD')),

	buildslave.EC2LatentBuildSlave("triumph4php-ubuntu-latent", os.getenv('T4P_UBUNTU12_BUILDSLAVE_PASSWORD'), "t2.micro",
		ami=os.getenv('T4P_UBUNTU12_AMI'),
		region="us-west-2",
		placement="a",
		identifier=os.getenv('T4P_EC2_IDENTIFIER'),
		secret_identifier=os.getenv('T4P_EC2_SECRET_IDENTIFIER')
	),
	buildslave.EC2LatentBuildSlave("triumph4php-ubuntu-14-latent", os.getenv('T4P_UBUNTU14_BUILDSLAVE_PASSWORD'), "t2.micro",
		ami=os.getenv('T4P_UBUNTU14_AMI'),
		region="us-west-2",
		placement="a",
		identifier=os.getenv('T4P_EC2_IDENTIFIER'),
		secret_identifier=os.getenv('T4P_EC2_SECRET_IDENTIFIER')
	),
	buildslave.EC2LatentBuildSlave("triumph4php-fedora", os.getenv('T4P_FEDORA_BUILDSLAVE_PASSWORD'), "t2.micro",
		ami=os.getenv('T4P_FEDORA_AMI'),
		region="us-west-2",
		placement="a",
		identifier=os.getenv('T4P_EC2_IDENTIFIER'),
		secret_identifier=os.getenv('T4P_EC2_SECRET_IDENTIFIER')
	),
	buildslave.EC2LatentBuildSlave("triumph4php-windows", os.getenv('T4P_WINDOWS_BUILDSLAVE_PASSWORD'), 't2.micro',
		ami=os.getenv('T4P_WINDOWS_AMI'),
		region='us-west-2',
		placement='b',
		identifier=os.getenv('T4P_EC2_IDENTIFIER'),
		secret_identifier=os.getenv('T4P_EC2_SECRET_IDENTIFIER')

		# the AMI already contains a reference to the volume
		#volumes=[
		#	(os.getenv('T4P_WINDOWS_VOLUME_ID'), '/dev/sdf')
		#]
	)
]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 2015}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/robertop/triumph4php.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'compile' build

from buildbot.schedulers import timed

c['schedulers'] = []

#
# once a day make sure any new commit work in windows and linux
#
c['schedulers'].append(timed.Nightly(name="daily build",
	branch="master",
	builderNames=["compile-windows", "compile-ubuntu-12", "compile-fedora"],
	hour=3, minute=0, onlyIfChanged=True))

#
# these schedulers look at that N.N.D-RC which are release candidates
# we want to build distributable packages
#
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="release-candidate-scheduler-ubuntu-12",
                            change_filter=util.ChangeFilter(branch_re='.*\..*\..*\-RC'),
                            treeStableTimer=None,
                            builderNames=["dist-linux-ubuntu-12"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="release-candidate-scheduler-ubuntu-14",
                            change_filter=util.ChangeFilter(branch_re='.*\..*\..*\-RC'),
                            treeStableTimer=None,
                            builderNames=["dist-linux-ubuntu-14"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="release-candidate-scheduler-rpm",
                            change_filter=util.ChangeFilter(branch_re='.*\..*\..*\-RC'),
                            treeStableTimer=None,
                            builderNames=["dist-linux-rpm"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="release-candidate-scheduler-windows",
                            change_filter=util.ChangeFilter(branch_re='.*\..*\..*\-RC'),
                            treeStableTimer=None,
                            builderNames=["dist-windows"]))
#
# allow triggering of releases at any time
#
c['schedulers'].append(schedulers.ForceScheduler(
                            name="release-force-ubuntu-12-deb",
                            builderNames=['dist-linux-ubuntu-12']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="release-force-ubuntu-14-deb",
                            builderNames=['dist-linux-ubuntu-14']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="release-force-fedora-rpm",
                            builderNames=['dist-linux-rpm']))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="release-force-windows",
                            builderNames=['dist-windows']))

#
# Allow triggering of a build at any time
#
c['schedulers'].append(schedulers.ForceScheduler(
			name="force-windows",
			builderNames=["compile-windows"]))
c['schedulers'].append(schedulers.ForceScheduler(
			name="force-ubuntu-12",
			builderNames=["compile-ubuntu-12"]))
c['schedulers'].append(schedulers.ForceScheduler(
			name="force-ubuntu-14",
			builderNames=["compile-ubuntu-14"]))
c['schedulers'].append(schedulers.ForceScheduler(
			name="force-fedora",
			builderNames=["compile-fedora"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
from buildbot.steps.shell import Compile
from buildbot.steps.slave import RemoveDirectory
linuxFactory = util.BuildFactory()

# steps to perform on linux slaves
linuxFactory.addStep(steps.Git(
	repourl='git://github.com/robertop/triumph4php.git',
	mode='incremental',
	description="checking out",
	timeout=7200))
linuxFactory.addStep(steps.ShellCommand(
	command=["./premake4", "setupdev"],
	name="setupDev",
	description="dependencies",
	timeout=7200))
linuxFactory.addStep(steps.ShellCommand(
	command=["./premake4", "lint"],
	name="lint", description="style linter"))
linuxFactory.addStep(steps.ShellCommand(
	command=["./premake4", "gmake"],
	env={ 'T4P_BUILD_SCRIPTS_DIR': '.' },
	name="premake", description="pre-making"))
linuxFactory.addStep(steps.ShellCommand(
	command=["make", "config=debug", "clean"],
	env={ 'T4P_BUILD_SCRIPTS_DIR': '.' },
	name="clean debug",
	description="cleaning"))
linuxFactory.addStep(steps.ShellCommand(
	command=["make", "config=release", "clean"],
	env={ 'T4P_BUILD_SCRIPTS_DIR': '.' },
	name="clean release",
	description="cleaning"))
linuxFactory.addStep(Compile(
	command=["make", "config=debug"],
	name="compile debug", description="compiling",
	flunkOnWarnings=True
))
linuxFactory.addStep(Compile(
	command=["make", "config=release"],
	name="compile release",
	description="compiling",
	flunkOnWarnings=True))

#
# steps to build a DEBIAN file AND uploads it to the
# master, since the slave is an EC2 instance that will
# get terminated
#
distDebFactory = util.BuildFactory()
distDebFactory.addStep(steps.Git(
	repourl='https://github.com/robertop/triumph4php.git',
	mode='incremental'))
distDebFactory.addStep(steps.ShellCommand(
        command=["./premake4", "setupdev"],
        timeout=7200
))
distDebFactory.addStep(steps.ShellCommand(
        command=["./premake4", "distdeb"],
        timeout=7200
))

# we want to get the location of the generated DEB file
# so that we can upload it
# we call the premake action that outputs the name of the DEB file
# but since it also outputs more than what we want, we just need
# the last line of the output.
def get_last_line(rc, stdout, stderr):
    lines = stdout.split('\n')
    return { 'T4P_PKG_FILENAME' : lines[-2].strip() }

distDebFactory.addStep(steps.SetPropertyFromCommand(
        command=["./premake4", "distdeb"],
        env={'T4P_PKG_FILENAME_ONLY': '1' },
        extract_fn=get_last_line
))
distDebFactory.addStep(steps.FileUpload(
        slavesrc=util.Interpolate("%(prop:T4P_PKG_FILENAME)s"),
        masterdest=util.Interpolate("~/uploads/%(prop:T4P_PKG_FILENAME)s"),
        url="http://localhost/"
))

#
# steps to create an RPM file
#
distRpmFactory = util.BuildFactory()
distRpmFactory.addStep(steps.Git(
	repourl='https://github.com/robertop/triumph4php.git',
	mode='incremental'))
distRpmFactory.addStep(steps.ShellCommand(
        command=["./premake4", "setupdev"],
        timeout=7200
))
distRpmFactory.addStep(steps.ShellCommand(
        command=["./premake4", "distrpm"],
        timeout=7200
))
distRpmFactory.addStep(steps.SetPropertyFromCommand(
        command=["./premake4", "distrpm"],
        env={'T4P_PKG_FILENAME_ONLY': '1' },
        extract_fn=get_last_line
))
distRpmFactory.addStep(steps.FileUpload(
        slavesrc=util.Interpolate("%(prop:T4P_PKG_FILENAME)s"),
        masterdest=util.Interpolate("~/uploads/%(prop:T4P_PKG_FILENAME)s"),
        url="http://localhost/"
))

#
# steps to perform on MSW slaves
#
mswFactory = util.BuildFactory();
mswFactory.addStep(steps.Git(
	repourl='git://github.com/robertop/triumph4php.git',
	mode='incremental',
	description="checking out"))
mswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "setupdev"],
	env={ 'T4P_GIT': 'git', 'T4P_SEVENZIP': '7za' },
	name="setupDev", description="dependencies"))
mswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "vs2008"],
	name="premake4",
	description="pre-making"))
mswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "compilemsw"],
	name="compile",
	description="compiling"))

#
# steps to build a 7zip archive that contains the
# triumph  executable
#
distMswFactory = util.BuildFactory();
distMswFactory.addStep(steps.Git(
	repourl='git://github.com/robertop/triumph4php.git',
	mode='incremental',
	description="checking out"))
distMswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "setupdev"],
	env={ 'T4P_GIT': 'git', 'T4P_SEVENZIP': '7za' },
	name="setupDev", description="dependencies"))
distMswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "vs2008"],
	name="premake4",
	description="pre-making"))
distMswFactory.addStep(steps.ShellCommand(
	command=["premake4.exe", "distmsw"],
	env={ 'T4P_GIT': 'git', 'T4P_SEVENZIP': '7za' },
	name="compile",
	description="compiling"))
distMswFactory.addStep(steps.SetPropertyFromCommand(
        command=["premake4.exe", "distmsw"],
        env={ 'T4P_GIT': 'git', 'T4P_SEVENZIP': '7za', 'T4P_PKG_FILENAME_ONLY': '1' },
        extract_fn=get_last_line
))
distMswFactory.addStep(steps.FileUpload(
        slavesrc=util.Interpolate("%(prop:T4P_PKG_FILENAME)s"),
        masterdest=util.Interpolate("~/uploads/%(prop:T4P_PKG_FILENAME)s"),
        url="http://localhost/"
))


c['builders'] = []

#
# the daily builders
#
c['builders'].append(
	util.BuilderConfig(
	name="compile-ubuntu-12",
	slavenames=["triumph4php-ubuntu-latent"],
	factory=linuxFactory))
c['builders'].append(
	util.BuilderConfig(
	name="compile-ubuntu-14",
	slavenames=["triumph4php-ubuntu-14-latent"],
	factory=linuxFactory))
c['builders'].append(
	util.BuilderConfig(
	name="compile-fedora",
	slavenames=["triumph4php-fedora"],
	factory=linuxFactory))
c['builders'].append(
	util.BuilderConfig(
	name="compile-windows",
	slavenames=["triumph4php-windows"],
	factory=mswFactory))

#
# the release builders
#
c['builders'].append(util.BuilderConfig(
	name='dist-linux-ubuntu-12',
	slavenames=["triumph4php-ubuntu-latent"],
	factory=distDebFactory))
c['builders'].append(util.BuilderConfig(
	name='dist-linux-ubuntu-14',
	slavenames=["triumph4php-ubuntu-14-latent"],
	factory=distDebFactory))
c['builders'].append(util.BuilderConfig(
	name='dist-linux-rpm',
	slavenames=["triumph4php-fedora"],
	factory=distRpmFactory))
c['builders'].append(util.BuilderConfig(
	name='dist-windows',
	slavenames=['triumph4php-windows'],
	factory=distMswFactory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.plugins import reporters;

c['services'] = []
c['services'].append(
	reporters.MailNotifier(
		fromaddr=os.getenv('T4P_STATUS_EMAIL_FROM'),
		sendToInterestedUsers=True,
		extraRecipients=[os.getenv('T4P_STATUS_EMAIL_TO')],
		relayhost=os.getenv('T4P_STATUS_EMAIL_HOST'),
		smtpPort=int(os.getenv('T4P_STATUS_EMAIL_PORT')),
		smtpUser=os.getenv('T4P_STATUS_EMAIL_FROM'),
		smtpPassword=os.getenv('T4P_STATUS_EMAIL_PASSWORD')
	)
)

####### PROJECT IDENTITY

# the 'title' stiring will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Triumph4PHP"
c['titleURL'] = "http://triumph4php.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://ci.triumph4php.com:8020/"

# minimalistic config to activate new web UI
c['www'] = dict(
	port=8020,

	# htpasswd file authentication does not seem to work :-(
	#auth=util.HTPasswdAuth('/home/buildbot/.htpasswd'),
	auth=util.UserPasswordAuth({os.getenv('T4P_WEB_AUTH_USER'): os.getenv('T4P_WEB_AUTH_PASSWORD')}),
	plugins=dict(
		waterfall_view={},
		console_view={}
	),
	change_hook_dialects={
		'github': {
			'secret': os.getenv('T4P_GITHUB_SECRET'),
			'strict': False  # Github does not send secret on its own
		},
	})

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
